import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  Card, 
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper
} from '@mui/material';
import { jsPDF } from "jspdf";
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import interactionPlugin from '@fullcalendar/interaction';
import newRequest from '../../utils/newRequest';
import GoogleTranslate from 'google-translate-api-x';
import Header from '../../components/Header';

const Reports = () => {
  const [dailyReports, setDailyReports] = useState([]);
  const [selectedDate, setSelectedDate] = useState(null);
  const [filteredReport, setFilteredReport] = useState(null);

  useEffect(() => {
    const fetchDailyReports = async () => {
      try {
        const response = await newRequest.get('/dailyreport');
        console.log(response.data);
        setDailyReports(response.data.DailyReport);
      } catch (error) {
        console.error('Error fetching daily reports:', error);
      }
    };

    fetchDailyReports();
  }, []);

  const handleDateSelect = (selectInfo) => {
    const selectedDateStr = selectInfo.startStr;
    setSelectedDate(selectedDateStr);

    // Find the report matching the selected date
    const matchedReport = dailyReports.find(report => report.date === selectedDateStr);
    setFilteredReport(matchedReport);
  };

  const generatePDF = (report) => {
    if (!report) return;

    const doc = new jsPDF();
    
    // Government-style header
    doc.setFontSize(10);
    doc.setTextColor(0);
    doc.text("OFFICIAL DAILY DISASTER REPORT", 105, 15, { align: 'center' });
    doc.setLineWidth(0.5);
    doc.line(20, 20, 190, 20);

    // Report Details
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(`DAILY REPORT: ${report.date}`, 20, 30);
    
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);

    // Detailed Reports Section
    doc.setFont('helvetica', 'bold');
    doc.text("DISASTER REPORTS:", 20, 50);
    
    let yPosition = 60;
    report.reports.forEach((reportItem) => {
      // Location in bold
      doc.setFont('helvetica', 'bold');
      doc.text(`Location: ${reportItem.location}`, 20, yPosition);
      
      // Report details in normal font
      doc.setFont('helvetica', 'normal');
      const splitText = doc.splitTextToSize(reportItem.report, 170);
      yPosition += 10;
      doc.text(splitText, 20, yPosition);
      yPosition += splitText.length * 7 + 10; // Adjust for multiple lines
    });

    // Footer with watermark
    doc.setTextColor(150);
    doc.setFont('helvetica', 'bold');
    doc.text("REPORT GENERATED BY REVIVE", 105, 280, { align: 'center', angle: 45 });

    doc.save(`DAILY_REPORT_${report.date}.pdf`);
  };

  async function generateHindiPDF(report) {
    if (!report) return;

    // Function to dynamically load Google Translate script
    const loadGoogleTranslateScript = () => {
        return new Promise((resolve, reject) => {
            // Check if script is already loaded
            if (window.google && window.google.translate) {
                resolve();
                return;
            }

            const googleTranslateScript = document.createElement('script');
            googleTranslateScript.src = 'https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit';
            googleTranslateScript.async = true;
            googleTranslateScript.onload = () => {
                window.googleTranslateElementInit = () => {
                    new window.google.translate.TranslateElement(
                        { pageLanguage: 'en' },
                        'google_translate_element'
                    );
                    resolve();
                };
            };
            googleTranslateScript.onerror = reject;
            document.head.appendChild(googleTranslateScript);

            // Create a hidden div for translation element
            const translateDiv = document.createElement('div');
            translateDiv.id = 'google_translate_element';
            translateDiv.style.display = 'none';
            document.body.appendChild(translateDiv);
        });
    };

    try {
        // Attempt to load Google Translate script
        await loadGoogleTranslateScript();

        // Create a new PDF document
        const doc = new jsPDF();

        // Set up PDF with Unicode font to support Hindi characters
        doc.addFont('NotoSans-Regular.ttf', 'NotoSans', 'normal');
        doc.setFont('NotoSans');

        // Predefined Hindi text for the report
        const hindiTitle = "रोज़ाना आपदा रिपोर्ट";
        const hindiDatePrefix = "तिथि:";
        const hindiLocationPrefix = "स्थान:";

        // Set up PDF header
        doc.setFontSize(16);
        doc.setTextColor(0);
        doc.text(hindiTitle, 105, 15, { align: 'center' });

        // Add date to the report
        doc.setFontSize(12);
        doc.text(`${hindiDatePrefix} ${report.date}`, 20, 25);

        // Add report details to the PDF
        let y = 40;
        report.reports.forEach((reportItem) => {
            // Location in bold
            doc.setFont('NotoSans', 'bold');
            doc.text(`${hindiLocationPrefix} ${reportItem.location}`, 20, y);

            // Report details in normal font
            doc.setFont('NotoSans', 'normal');
            const splitText = doc.splitTextToSize(reportItem.report, 170);
            y += 10;
            doc.text(splitText, 20, y);
            y += splitText.length * 7 + 15;
        });

        // Add a watermark
        doc.setTextColor(150);
        doc.setFont('NotoSans', 'bold');
        doc.text("REVIVE द्वारा उत्पन्न", 105, 280, { align: 'center', angle: 45 });

        // Save the PDF with a Hindi filename
        doc.save("रोज़ाना_आपदा_रिपोर्ट.pdf");

    } catch (error) {
        console.error('Error generating Hindi PDF:', error);
        // Fallback to English PDF if script loading fails
        generatePDF(report);
    }
}

  // Prepare events for calendar (dates with reports)
  const events = dailyReports.map(report => ({
    title: 'Report Available',
    start: report.date,
    allDay: true
  }));

  return (
    <Box sx={{ 
      display: 'flex', 
      flexDirection: 'column', 
      alignItems: 'center', 
      p: 3,
      backgroundColor: '#F0F0F0'
    }}>
        <Header title="Generate Daily Reports" subtitle="Select a Date" />
      <Card sx={{ 
        width: '100%', 
        maxWidth: 1000, 
        boxShadow: 3,
        border: '2px solid #4A4A4A'
      }}>
        <CardContent>
          <Typography 
            variant="h4" 
            sx={{ 
              textAlign: 'center', 
              mb: 3, 
              textTransform: 'uppercase',
              fontWeight: 'bold',
              color: '#2C3E50'
            }}
          >
            Daily Disaster Reports
          </Typography>

          {/* Calendar */}
          <Box 
  sx={{ 
    height: '400px', 
    mb: 3, 
    overflowY: 'auto' // Enable vertical scrolling 
  }}
>
  <FullCalendar
    plugins={[dayGridPlugin, interactionPlugin]}
    initialView="dayGridMonth"
    events={events}
    selectable={true}
    select={handleDateSelect}
    selectAllow={(selectInfo) => {
      // Check if the selected date has a report
      const selectedDateStr = selectInfo.startStr;
      return dailyReports.some(report => report.date === selectedDateStr);
    }}
  />
</Box>

          {/* Report Display */}
          
        </CardContent>
      </Card>
      {filteredReport && (
            <>
              <Typography 
                variant="h6" 
                sx={{ 
                  mb: 2, 
                  mt:3,
                  fontWeight: 'bold',
                  color: '#2C3E50'
                }}
              >
                Report Date: {filteredReport.date}
              </Typography>

              <TableContainer component={Paper}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell sx={{ fontWeight: 'bold' }}>Location</TableCell>
                      <TableCell sx={{ fontWeight: 'bold' }}>Report Details</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {filteredReport.reports.map((reportItem, idx) => (
                      <TableRow key={idx}>
                        <TableCell>{reportItem.location}</TableCell>
                        <TableCell>{reportItem.report}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>

              <Box sx={{ 
                display: 'flex', 
                justifyContent: 'center', 
                mt: 2 
              }}>
                <Button 
                  variant="contained" 
                  color="primary"
                  onClick={() => generatePDF(filteredReport)}
                  sx={{ 
                    textTransform: 'uppercase',
                    fontWeight: 'bold'
                  }}
                >
                  Generate PDF Report
                </Button>
                {/* <Button
  variant="outlined"
  color="secondary"
  sx={{ textTransform: 'uppercase', fontWeight: 'bold', ml: 2 }}
  onClick={() => generateHindiPDF(filteredReport)}
>
  Download in Hindi
</Button> */}
              </Box>
            </>
          )}
    </Box>
  );
};

export default Reports;